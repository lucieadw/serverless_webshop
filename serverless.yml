# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: webshop


frameworkVersion: '2'


provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221


  stage: dev
  region: eu-central-1
  environment:
    PRODUCTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    BASKET_TABLE: Basket-${opt:stage, self:provider.stage}
    ORDERS_TABLE: Orders-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"


custom:
  cognitoAuthorizer:
    arn: arn:aws:cognito-idp:eu-central-1:243037674803:userpool/eu-central-1_vyUSmnSNn
    scopes:
      - aws.cognito.signin.user.admin
      - openid

functions:
 ############################## Products ##############################
  getAll:
    handler: src/products/getAll.handler
    events:
      - http:
          path: products
          method: get
          cors: true

  create:
    handler: src/products/create.handler
    events:
      - http:
          path: products
          method: post
          cors: true

  get:
    handler: src/products/get.handler
    events:
      - http:
          path: products/{category}/{id}
          method: get
          cors: true

  getCategory:
    handler: src/products/getCategory.handler
    events:
      - http:
          path: products/{category}
          method: get
          cors: true

  delete:
    handler: src/products/delete.handler
    events:
      - http:
          path: products/{category}/{id}
          method: delete
          cors: true
  
  update:
    handler: src/products/update.handler
    events:
      - http:
          path: products/{category}/{id}
          method: put
          cors: true
          
  populate:
    handler: src/products/generator.populate
    timeout: 30
    events:
      - http:
          path: generator
          method: post
          cors: true

############################## Shopping Basket ##############################
  createBasket:
    handler: src/basket/createBasket.handler
    events:
      - http:
          path: basket
          method: post
          cors: true
  getBasket:
    handler: src/basket/getBasket.handler
    events:
      - http:
          path: basket
          method: get
          authorizer: ${self:custom.cognitoAuthorizer}
          cors: true
  updateBasket:
    handler: src/basket/updateBasket.handler
    events:
      - http:
          path: basket/update
          method: put #obj mit productID und anzahl (wenn anz. 0 -> produkt weg)
          authorizer: ${self:custom.cognitoAuthorizer}
          cors: true
  addToBasket:
    handler: src/basket/addToBasket.handler
    events:
      - http:
          path: basket/add
          method: put
          authorizer: ${self:custom.cognitoAuthorizer}
          cors: true
############################## Order Management ##############################
  createOrder:
    handler: src/orders/createOrder.handler
    events:
      - http:
          path: orders
          method: post
          authorizer: ${self:custom.cognitoAuthorizer}
          cors: true
  deleteOrder:
    handler: src/orders/deleteOrder.handler
    events:
      - http:
          path: orders/{orderNo}
          method: delete
          authorizer: ${self:custom.cognitoAuthorizer}
          cors: true        
  getOrder:
    handler: src/orders/getOrder.handler
    events:
      - http:
          path: orders/{orderNo}
          method: get
          authorizer: ${self:custom.cognitoAuthorizer}
          cors: true
  getAllOrders:
    handler: src/orders/getAllOrders.handler
    events:
      - http:
          path: orders
          method: get
          authorizer: ${self:custom.cognitoAuthorizer}
          cors: true
#---------------------------- Resources (Tables) ----------------------------# 
resources:
  Resources:
    Products:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: category
            AttributeType: S
          -
            AttributeName: productId
            AttributeType: S
        KeySchema:
          -
            AttributeName: category
            KeyType: HASH
          -
            AttributeName: productId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
    Basket:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BASKET_TABLE}
    Orders:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: orderNo
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
          -
            AttributeName: orderNo
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ORDERS_TABLE}
plugins:
  - serverless-plugin-typescript
